<?php
/**
 * chkBenchmarkContentTest Class PHP File
 * Created on January, the 12th 2010 at 21:26:14 by ronan
 *
 * @copyright Copyright (C) 2011 Ronan Guilloux. All rights reserved.
 * @license http://www.gnu.org/licenses/agpl.html GNU AFFERO GPL v3
 * @version //autogen//
 * @author Ronan Guilloux - coolforest.net
 * @package WebCheckerTests
 * @filesource benchmarkcontenttest.php
 */

/**
 * Test class for chkBenchmarkContent
 * Generated by PHPUnit on 2011-01-12 at 23:50:17.
 *
 * @package WebCheckerTests
 * @version //autogen//
 * @codeCoverageIgnore
 */
class chkBenchmarkContentTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @group WebCheckerTests
     */
    protected function setUp()
    {
        $this->object = new chkBenchmarkContent();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @expectedException ezcBaseValueException
     * @group WebCheckerTests
     */
    public function testSetExceptionOnExistingOptionsPropertyWithWrongValue()
    {
        $this->object->options = -1;
    }

    /**
     * @group WebCheckerTests
     */
    public function testSimpleRun()
    {
        $uriOptions = $this->fillUriOptions( 'simpleRun' );
        $contentOptions = $this->fillContentOptions( 'simpleRun' );
        $this->object->setUp( $uriOptions, $contentOptions );
        $result = $this->object->run();

        // tracing :

        //        var_export( "\n" . $result['headerSent'] );
        //var_export( $result );
        //        var_export( "\n" . $result['code'] );
        //        var_export( "\n" . $result['contentType'] );
        //        var_export( "\n" . $result['contentLength'] );
        //        var_export( "\n" . $result['fileTime'] );
        //        var_export( "\n" . $result['content'] );

        //        // Specify configuration
        //        $config = array(
        //           'indent'         => true,
        //           'output-xhtml'   => true,
        //           'wrap'           => 200
        //        );
        //
        //        // Tidy
        //        $tidy = new tidy;
        //        $tidy->parseString( $result['content'], $config, 'utf8' );
        //        // $tidy->cleanRepair();// => no xhtml error output plz
        //        // Output
        //        var_export( $tidy );

        $this->assertTrue( $result['result'] );
    }
    
    /**
     * @group WebCheckerTests
     */
    public function testRunRightLoginGoodContent()
    {
        $uriOptions = $this->fillUriOptions( 'rightLoginGoodContent' );
        $contentOptions = $this->fillContentOptions( 'rightLoginGoodContent' );
        $this->object->setUp( $uriOptions, $contentOptions );
        $result = $this->object->run();
        $this->assertTrue( $result['result'] );
    }

    /**
     * @group WebCheckerTests
     */
    public function testRunRightLoginBadContent()
    {
        $uriOptions = $this->fillUriOptions( 'rightLoginBadContent' );
        $contentOptions = $this->fillContentOptions( 'rightLoginBadContent' );
        $this->object->setUp( $uriOptions, $contentOptions );
        $result = $this->object->run();
        $this->assertFalse( $result['result'] );
    }

    /**
     * @group WebCheckerTests
     */
    public function testNotExpectedValue()
    {
        $uriOptions = $this->fillUriOptions( 'notExpectedValue' );
        $contentOptions = $this->fillContentOptions( 'notExpectedValue' );
        $this->object->setUp( $uriOptions, $contentOptions );
        $result = $this->object->run();
        $this->assertTrue( $result['result'] );
    }

    /**
     * @group WebCheckerTests
     */
    public function testNotExpectedButFound()
    {
        $uriOptions = $this->fillUriOptions( 'notExpectedButFound' );
        $contentOptions = $this->fillContentOptions( 'notExpectedButFound' );
        $this->object->setUp( $uriOptions, $contentOptions );
        $result = $this->object->run();
        $this->assertFalse( $result['result'] );
    }

    

    /**
     * Fill chkStructUriOptions objects for tests purposes
     *
     * @param int $index
     */
    protected function fillUriOptions( $index )
    {
        switch ( $index )
        {
            case 'simpleRun' :
                return new chkStructUriOptions(
            		'http',
            		'incubator.apache.org',        	
                array(),
                array('zetacomponents','documentation', 'overview.html'),
                null,
                	'',
                true,
                null
                );
                break;
            case 'rightLoginGoodContent' :
                return new chkStructUriOptions(
        			'http',
        			'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
        			'',
                true,
            		'login:password'
            		);
            		break;
            case 'rightLoginBadContent' :
                return new chkStructUriOptions(
                	'http',
                	'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
            		'',
                true,
                	'login:password'
                	);
                	break;
            case 'notExpectedValue' :
                return new chkStructUriOptions(
                	'http',
                	'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
            		'',
                true,
                	'login:password'
                	);
                	break;
            case 'notExpectedButFound' :
                return new chkStructUriOptions(
                	'http',
                	'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
            		'',
                true,
                	'login:password'
                	);
                	break;
        }
        return array();
    }

    /**
     * Fill chkStructUriOptions objects for tests purposes
     *
     * @param int $index
     */
    protected function fillContentOptions( $index )
    {
        switch ( $index )
        {
            case 'simpleRun' :
                return new chkStructContentOptions(
                array( 'Apache' ),
                null
                );
            case 'rightLoginGoodContent' :
                return new chkStructContentOptions(
                array( 'Got it !' ),
                null
                );
                break;
            case 'rightLoginBadContent' :
                return new chkStructContentOptions(
                array( "Didn't got it !" ),
                null
                );
                break;
            case 'notExpectedValue' :
                return new chkStructContentOptions(
                null,
                array( "This is not expected." )
                );
                break;
            case 'notExpectedButFound' :
                return new chkStructContentOptions(
                null,
                array( 'Got it !' )
                );
                break;
        }
        return array();
    }

}
?>
