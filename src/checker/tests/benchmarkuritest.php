<?php
/**
 * chkBenchmarkUriTest Class PHP File
 * Created on January, the 12th 2010 at 21:26:14 by ronan
 *
 * @copyright Copyright (C) 2011 Ronan Guilloux. All rights reserved.
 * @license http://www.gnu.org/licenses/agpl.html GNU AFFERO GPL v3
 * @version //autogen//
 * @author Ronan Guilloux - coolforest.net
 * @package WebCheckerTests
 * @filesource benchmarkuritest.php
 */

/**
 * Test class for chkBenchmarkUri
 * Generated by PHPUnit on 2011-01-12 at 23:50:17.
 *
 * @package WebCheckerTests
 * @version //autogen//
 * @codeCoverageIgnore
 */
class chkBenchmarkUriTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @group WebCheckerTests
     */
    protected function setUp()
    {
        $this->object = new chkBenchmarkUri();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @group WebCheckerTests
     */
    public function testGet()
    {
        $this->object->options = new chkStructUriOptions();
        $foo = $this->object->options;
    }

    /**
     * @expectedException ezcBasePropertyNotFoundException
     * @group WebCheckerTests
     */
    public function testGetExceptionOnNonExistingProperty()
    {
        $foo = $this->object->bar;
    }

    /**
     * @expectedException ezcBaseValueException
     * @group WebCheckerTests
     */
    public function testSetExceptionOnExistingOptionsPropertyWithWrongValue()
    {
        $this->object->options = -1;
    }

    /**
     * @expectedException ezcBaseValueException
     * @group WebCheckerTests
     */
    public function testSetExceptionOnExistingezcUrlPropertyWithWrongValue()
    {
        $this->object->url = new ezcUrl(); // string excepted
    }

    //    /**
    //     * @expectedException ezcBaseValueException
    //     * @group WebCheckerTests
    //     */
    //    public function testSetException_4()
    //    {
    //        $this->object->options->password = new ArrayObject( array() );
    //    }

    /**
     * @expectedException ezcBasePropertyNotFoundException
     * @group WebCheckerTests
     */
    public function testSetExceptionOnNonExistingProperty()
    {
        $this->object->foo = 'bar';
    }

    /**
     * @group WebCheckerTests
     */
    public function testIsset()
    {
        $this->object->options = new chkStructUriOptions();
        $this->assertTrue( isset( $this->object->options ) );
    }

    /**
     * @group WebCheckerTests
     */
    public function testToString()
    {
        (string)$foo = (string)$this->object;
    }

    /**
     * @group WebCheckerTests
     */
    public function testRun_1()
    {
        $options = $this->fillOptions( 1 );
        $this->object->setUp( $options );
        $result = $this->object->run();
        $this->assertTrue( $result['result'] );

        // tracing :

        //        var_export( "\n" . $result['headerSent'] );
        //        var_export( "\n" . $result['lastUrl'] );
        //        var_export( "\n" . $result['lastUrl'] );
        //        var_export( "\n" . $result['code'] );
        //        var_export( "\n" . $result['contentType'] );
        //        var_export( "\n" . $result['contentLength'] );
        //        var_export( "\n" . $result['fileTime'] );
        //        var_export( "\n" . $result['content'] );

        //        // Specify configuration
        //        $config = array(
        //           'indent'         => true,
        //           'output-xhtml'   => true,
        //           'wrap'           => 200
        //        );
        //
        //        // Tidy
        //        $tidy = new tidy;
        //        $tidy->parseString( $result['content'], $config, 'utf8' );
        //        // $tidy->cleanRepair();// => no xhtml error output plz
        //        // Output
        //        var_export( $tidy );

        if( isset( $options->expectedStrings ) )
        {
            foreach( $options->expectedStrings as $expected )
            {
                $this->assertNotEquals(false, strpos($result['content'], str_replace('  ', '', trim($expected) ) ) );
            }
        }
        if( isset( $options->notExpectedStrings ) )
        {
            foreach( $options->notExpectedStrings as $notExpected )
            {
                $this->assertFalse(strpos($result['content'], str_replace('  ', '', trim($notExpected) ) ) );
            }
        }
    }

    /**
     * @expectedException ezcUrlException
     * @group WebCheckerTests
     */
    public function testRunException_2()
    {
        $options = $this->fillOptions( 2 );
        $this->object->setUp( $options );
        $result = $this->object->run();
    }

    /**
     * @expectedException ezcUrlException
     * @group WebCheckerTests
     */
    public function testRunException_3()
    {
        $options = $this->fillOptions( 3 );
        $this->object->setUp( $options );
        $result = $this->object->run();
    }

    /**
     * @expectedException ezcUrlException
     * @group WebCheckerTests
     */
    public function testRun_4()
    {
        $result = $this->object->run();
        $options = $this->fillOptions( 4 );
        $this->object->setUp( $options );
        $result = $this->object->run();
    }

    /**
     * @expectedException ezcUrlException
     * @group WebCheckerTests
     */
    public function testRun_5()
    {
        $options = $this->fillOptions( 5 );
        $this->object->setUp( $options );
        $result = $this->object->run();
    }

    /**
     * @group WebCheckerTests
     */
    public function testRunException_6()
    {
        $options = $this->fillOptions( 6 );
        $this->object->setUp( $options );
        try
        {
            $result = $this->object->run();
        }
        catch (Exception $e)
        {
            $this->markTestSkipped('This test was skipped,  the test url is probably no more available');
        }
    }

    /**
     * @group WebCheckerTests
     */
    public function testRunException_7()
    {
        $options = $this->fillOptions( 7 );
        $this->object->setUp( $options );
        $result = $this->object->run();
    }

    /**
     * @group WebCheckerTests
     */
    public function testRunException_8()
    {
        $options = $this->fillOptions( 8 );
        $this->object->setUp( $options );
        $result = $this->object->run();
        if( isset( $options->notExpectedStrings ) )
        {
            foreach( $options->notExpectedStrings as $notExpected )
            {
                $this->assertFalse(strpos($result['content'], str_replace('  ', '', trim($notExpected) ) ) );
            }
        }
    }

    /**
     * Fill chkStructUriOptions objects for tests purposes
     *
     * @param int $index
     */
    protected function fillOptions( $index )
    {
        switch ( $index )
        {
            case 1 :
                return new chkStructUriOptions(
        	'http',
        	'incubator.apache.org',        	
                array(),
                array('zetacomponents','documentation', 'overview.html'),
                null,
            '',
                true,
                null,
                array( 'Apache Zeta Components' ),
                array( 'This must not be' )
                );
                break;
            case 2 :
                return new chkStructUriOptions(
                null,
        	    null,   	
                array(),
                array(),
                null,
        	'',
                true
                );
                break;
            case 3 :
                return new chkStructUriOptions(
                null,
        	'foo:bar',        	
                array(),
                array(),
                null,
        	'',
                true
                );
                break;
            case 4 :
                return new chkStructUriOptions(
        	'http',
        	'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
        	'',
                true,
                null,
                array( "Didn't got it !" )
                );
                break;
            case 5 :
                return new chkStructUriOptions(
        	'http',
        	'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
        	'',
                true,
            'null:null',
                array( 'Error' )
                );
                break;
            case 6:
                return new chkStructUriOptions(
        	'http',
        	'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
        	'',
                true,
            'login:password'
            );
            break;
            case 7 :
                return new chkStructUriOptions(
        			'http',
        			'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
        			'',
                true,
            		'login:password',
                array( 'Got it !' )
                );
                break;
            case 8 :
                return new chkStructUriOptions(
        	'http',
        	'92.243.31.245',        	
                array(),
                array( 'phpUnitStubs', 'hidden', 'index.html' ),
                null,
        	'',
                true,
            'login:password',
                array( "Didn't got it !" )
                );
                break;
        }
        return array();
    }

}
?>
