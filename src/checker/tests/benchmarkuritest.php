<?php
/**
 * checkerBenchmarkUriTest Class PHP File
 * Created on January, the 12th 2010 at 21:26:14 by ronan
 *
 * @copyright Copyright (C) 2011 Ronan Guilloux. All rights reserved.
 * @license http://www.gnu.org/licenses/agpl.html GNU AFFERO GPL v3
 * @version //autogen//
 * @author Ronan Guilloux - coolforest.net
 * @package WebCheckerTests
 * @filesource benchmarkpathtest.php
 */

/**
 * Test class for checkerBenchmark
 * Generated by PHPUnit on 2011-01-12 at 23:50:17.
 *
 * @package WebCheckerTests
 * @version //autogen//
 */
class checkerBenchmarkUriTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @group WebCheckerTests
     */
    protected function setUp()
    {
        $this->object = new checkerBenchmarkUri();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @group WebCheckerTests
     */
    public function testSet()
    {
        $this->object->options = array();
        $this->object->password = '';
        $this->object->password = '%$foo$Bar!';
    }

    /**
     * @group WebCheckerTests
     */
    public function testGet()
    {
        $this->object->options = array();
        $foo = $this->object->options;
        $this->object->password = '%$foo$Bar!';
        $bar = $this->object->password;
    }

    /**
     * @expectedException ezcBasePropertyNotFoundException
     * @group WebCheckerTests
     */
    public function testGetException()
    {
        $foo = $this->object->bar;
    }

    /**
     * @expectedException ezcBaseValueException
     * @group WebCheckerTests
     */
    public function testSetException_1()
    {
        $this->object->options = -1;
    }

    /**
     * @expectedException ezcBaseValueException
     * @group WebCheckerTests
     */
    public function testSetException_2()
    {
        $this->object->url = new ezcUrl(); // string excepted
    }

    /**
     * @expectedException ezcBaseValueException
     * @group WebCheckerTests
     */
    public function testSetException_3()
    {
        $this->object->check = 'foo'; // string excepted
    }

    /**
     * @expectedException ezcBaseValueException
     * @group WebCheckerTests
     */
    public function testSetException_4()
    {
        $this->object->password = new ArrayObject( array() );
    }

    /**
     * @expectedException ezcBasePropertyNotFoundException
     * @group WebCheckerTests
     */
    public function testSetException_5()
    {
        $this->object->foo = 'bar';
    }

    /**
     * @group WebCheckerTests
     */
    public function testIsset()
    {
        $this->object->options = array();
        $this->assertTrue(isset($this->object->options));
    }

    /**
     * @group WebCheckerTests
     * @codeCoverageIgnore
     */
    public function testRun_1()
    {
        $options = $this->fillRunOptions_1();
        $this->object->setUp($options);
        $result = $this->object->run();
        //var_export($result);
        $this->assertTrue( $result['result'] );

        // tracing :

        //        var_export( "\n" . $result['headerSent'] );
        //        var_export( "\n" . $result['lastUrl'] );
        //        var_export( "\n" . $result['lastUrl'] );
        //        var_export( "\n" . $result['code'] );
        //        var_export( "\n" . $result['contentType'] );
        //        var_export( "\n" . $result['contentLength'] );
        //        var_export( "\n" . $result['fileTime'] );
        //        var_export( "\n" . $result['content'] );

        //        // Specify configuration
        //        $config = array(
        //           'indent'         => true,
        //           'output-xhtml'   => true,
        //           'wrap'           => 200
        //        );
        //
        //        // Tidy
        //        $tidy = new tidy;
        //        $tidy->parseString( $result['content'], $config, 'utf8' );
        //        // $tidy->cleanRepair();// => no xhtml error output plz
        //        // Output
        //        var_export( $tidy );

        if( isset( $options['expectedStrings'] ) )
        {
            foreach( $options['expectedStrings'] as $expected )
            {
                $this->assertNotEquals(false, strpos($result['content'], str_replace('  ', '', trim($expected) ) ) );
            }
        }
        if( isset( $options['expectedStrings'] ) )
        {
            foreach( $options['notExpectedStrings'] as $notExpected )
            {
                $this->assertFalse(strpos($result['content'], str_replace('  ', '', trim($notExpected) ) ) );
            }
        }
    }

    /**
     * @expectedException ezcUrlException
     * @group WebCheckerTests
     */
    public function testSetRunException_2()
    {
        $options = $this->fillRunOptions_2();
        $this->object->setUp($options);
        $result = $this->object->run();
    }

    /**
     * @expectedException ezcUrlException
     * @group WebCheckerTests
     */
    public function testSetRunException_3()
    {
        $options = $this->fillRunOptions_3();
        $this->object->setUp($options);
        $result = $this->object->run();
    }

    protected function fillRunOptions_1()
    {
        return array(
        	'scheme' => 'http',
        	'host' => 'incubator.apache.org',        	
        	'basedir' => array(),
            'path' => array('zetacomponents','documentation', 'overview.html'),
        	'query' => '',
        	'check' => true,
            'expectedStrings' => array( 'Apache Zeta Components' ),
        	'notExpectedStrings' => array( 'This must not be' ),
        );
    }

    protected function fillRunOptions_2()
    {
        return array(
        	'scheme' => 'htp',
        	'host' => 'foo:bar',        	
        	'basedir' => array(),
            'path' => array(),
        	'query' => '',
        	'check' => true,
        );
    }

    protected function fillRunOptions_3()
    {
        return array(
        	'scheme' => null,
        	'host' => 'foo:bar',        	
        	'basedir' => array(),
            'path' => array(),
        	'query' => '',
        	'check' => true,
        );
    }

}
?>
